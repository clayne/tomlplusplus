<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.1">
  <compound kind="class">
    <name>toml::array</name>
    <filename>classtoml_1_1array.html</filename>
    <base>toml::node</base>
    <member kind="typedef">
      <type>array_iterator</type>
      <name>iterator</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a62a18471ca7c5b06204d2e26c963f833</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_array_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>adfd38318d3390a76f073a83fd2f2aa21</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a29fc707cf66a79f3c3d93dadbe3b2719</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5883d7e1a7b9c9ba2b87fb8043ddb0d9</anchor>
      <arglist>(const array &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ac552a63c329598d671e6531b0cef957b</anchor>
      <arglist>(array &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>array &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>af9bf16bc9e21887dc1447651f6fbaba7</anchor>
      <arglist>(const array &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>array &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a7e5e45777e08941abb2069a5991e1f31</anchor>
      <arglist>(array &amp;&amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ace30b5dcdbcb8ff7da2c49f7e55bdfaa</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a8484f098f8bb1a7dd8426ec99f4bb807</anchor>
      <arglist>(ElemType &amp;&amp;val, ElemTypes &amp;&amp;... vals)</arglist>
    </member>
    <member kind="function">
      <type>node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a10f914637ff56f5bc6f96b089fd141a3</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a30764b48a4c5cb191b620b77df4c8b00</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a17362a39f6ec6f14ce59f8a8ed2b88cf</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a7a38831cec7e7215a6101ba40fc1ce11</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a92874b0f5a195ffc699dde0a5a25f118</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab8e15c4067237ab3192ab8f412bee0f6</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a628574d1e47440545019a3467be64fdc</anchor>
      <arglist>(node_type ntype) const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>abff1c5e9bf3afb04ff16c15522aa55c4</anchor>
      <arglist>(node_type ntype, node *&amp;first_nonmatch) noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aa3f96a375f73b5378d06894ab40af641</anchor>
      <arglist>(node_type ntype, const node *&amp;first_nonmatch) const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>node &amp;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a853bad0297ca4dcee57c97da2fe318e7</anchor>
      <arglist>(size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const node &amp;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ae9f72a1b877f2ac66327a152d55aa9c6</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node &amp;</type>
      <name>front</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a9c78848129a2a703c154e7cbe1a973d3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const node &amp;</type>
      <name>front</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5ba3af18c63546da6f9d2ac3b5b77f64</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node &amp;</type>
      <name>back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a4c58dea5e8795e4b9f8df4f1e1473204</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const node &amp;</type>
      <name>back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ac7652c1ab60af2ca1c7d52f0658639b4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a8ee8179ddf1cb44fdf0b8d0700f55c2f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a7cff1526a6d1f6157e0eab231b4757aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a56d1cba006dccc5ad9982b58a8b2ddc1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>adaf908b0cc3e8bcb1ee9ec9ec706d223</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a778b5b807ff7329f7de10237d73f29c2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a50e6b032805760f3930e02923d9a84b0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5d527ea6bfddad1025e90e4363c822cc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>af81d7b6a1257ad766a47d9276855a7c9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a1ba073adc52c3df5ad29cfd7e5daa1d5</anchor>
      <arglist>(size_t new_capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>adaa65bf63f29f898c27423306c165d68</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>max_size</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ae65a76add6d756fc7ba8f12a5aad983c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>capacity</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a02b773a1ff337692e78da429030c1610</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a718c2031ead428aa52912741f6d094aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab44c0e3568a683bc6d53c8f5b11abb88</anchor>
      <arglist>(const_iterator pos, ElemType &amp;&amp;val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aa454d276f2935b1e2b5c2caec9bc2a0d</anchor>
      <arglist>(const_iterator pos, size_t count, ElemType &amp;&amp;val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a311fed9b54b87daab0646fbc1818170b</anchor>
      <arglist>(const_iterator pos, Iter first, Iter last) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a87500f1ea51f3b42dadc686a3e128fea</anchor>
      <arglist>(const_iterator pos, std::initializer_list&lt; ElemType &gt; ilist) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>emplace</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5b87d1345eccbb1b9406092e72fa0c38</anchor>
      <arglist>(const_iterator pos, Args &amp;&amp;... args) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a22389a9ed9444fe52be10c4acbdec908</anchor>
      <arglist>(const_iterator pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a723388860d72c9a162137d0293366fb2</anchor>
      <arglist>(const_iterator first, const_iterator last) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a8694e01e9b0b1c5b9152518137d5b971</anchor>
      <arglist>(size_t new_size, ElemType &amp;&amp;default_init_val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>truncate</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a6e3ac9962c706a88c1001ff83a4084f3</anchor>
      <arglist>(size_t new_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a2b3315295340dc76b69ce916d31fec35</anchor>
      <arglist>(ElemType &amp;&amp;val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>emplace_back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>af82fb4fec1f33c323123fab0ec4a74ac</anchor>
      <arglist>(Args &amp;&amp;... args) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>af99d72e29cef84f736d91d627b47a1dc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a10664e00054ea4021fec5144b69b8792</anchor>
      <arglist>(size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a44db509dce6b7b77e563c822a5936abe</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; ElemType &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5c2f4624498cba9e1e467b0eb2e9046e</anchor>
      <arglist>(size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; ElemType &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ae47ca1cc4c61e94fed30aea72ca8d268</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>array &amp;</type>
      <name>flatten</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aa2a21958705629bde15aafae9598a2ec</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>array &amp;&amp;</type>
      <name>flatten</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ad307bea17e7640c57715d67ab8a777d4</anchor>
      <arglist>() &amp;&amp;</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aeff35977a4b13fe0fefb9a3b5917f98e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5ecdb684288275ce1786281fbe1845cc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a3ea1296a95c43125119a6fe26af5b014</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a1db6db67940c59bf0d6f7be184be3511</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a47ca3bd6392029a065f13c029b2db0b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a6e6060cb1233b87d7b57a2a203891d2a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a4a7663a4b15650cf833d5c833e313d9b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9115204bee51ac6ef962dd9d47bf1b7e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a03e1bbe1a0640953b7105fe40c733118</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa696716239e7434145103173e880fb80</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ab8f42ecf095260b1d97363949a98267b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac507d02b3b744e0624c504614e91c9e5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a480ae95e180992d152ad80e3b52a330a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a40031abf671512f9fdcd31666ce481fd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a35ec7bd4efab69906d7874df736cdaaf</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aeb23a8054899c4b0d57e10c4a3dcadf0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a68cc63dfd8e435b00c7c99da298d6733</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa818a12fc0212e5e416b38fcf103f899</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a21d7481eabdf0eaedb91ddeefa950cc1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac1417bb4313b2624e3ea270a487f153b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a48098db842e6a202902e6c85326f71b4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a423ddccc36345545615e20290c9a8a65</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::unwrap_node&lt; T &gt; &amp;</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a0f2b674e80b882b329513e7ec9aed842</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::unwrap_node&lt; T &gt; &amp;&amp;</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a292bce25bfe779dc51403e88f0cc4bcc</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::unwrap_node&lt; T &gt; &amp;</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a378e94ebc00235eb4d1da68f81edd77f</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa378fa343dab7d7bdb4073570dba5fdc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad47390f3832260db7bf06cd282598240</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a371a03c4b91cfbb8d9ee785c1eacf836</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad4a42e50f923b0fe1efff0a6719dab90</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a04d800d6ec9342d2ee2a364f05317573</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; const node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac7d6979c7246d7faee8ca48aadfcee68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; Char &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a8574290131ff09ae36a4535e2ac25261</anchor>
      <arglist>(std::basic_ostream&lt; Char &gt; &amp;, const array &amp;)</arglist>
    </member>
    <member kind="function">
      <type>node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a10f914637ff56f5bc6f96b089fd141a3</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a30764b48a4c5cb191b620b77df4c8b00</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a17362a39f6ec6f14ce59f8a8ed2b88cf</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a7a38831cec7e7215a6101ba40fc1ce11</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a92874b0f5a195ffc699dde0a5a25f118</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab8e15c4067237ab3192ab8f412bee0f6</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a628574d1e47440545019a3467be64fdc</anchor>
      <arglist>(node_type ntype) const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>abff1c5e9bf3afb04ff16c15522aa55c4</anchor>
      <arglist>(node_type ntype, node *&amp;first_nonmatch) noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aa3f96a375f73b5378d06894ab40af641</anchor>
      <arglist>(node_type ntype, const node *&amp;first_nonmatch) const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>node &amp;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a853bad0297ca4dcee57c97da2fe318e7</anchor>
      <arglist>(size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const node &amp;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ae9f72a1b877f2ac66327a152d55aa9c6</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node &amp;</type>
      <name>front</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a9c78848129a2a703c154e7cbe1a973d3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const node &amp;</type>
      <name>front</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5ba3af18c63546da6f9d2ac3b5b77f64</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node &amp;</type>
      <name>back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a4c58dea5e8795e4b9f8df4f1e1473204</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const node &amp;</type>
      <name>back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ac7652c1ab60af2ca1c7d52f0658639b4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a8ee8179ddf1cb44fdf0b8d0700f55c2f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a7cff1526a6d1f6157e0eab231b4757aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a56d1cba006dccc5ad9982b58a8b2ddc1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>adaf908b0cc3e8bcb1ee9ec9ec706d223</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a778b5b807ff7329f7de10237d73f29c2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a50e6b032805760f3930e02923d9a84b0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5d527ea6bfddad1025e90e4363c822cc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>af81d7b6a1257ad766a47d9276855a7c9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a1ba073adc52c3df5ad29cfd7e5daa1d5</anchor>
      <arglist>(size_t new_capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>adaa65bf63f29f898c27423306c165d68</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>max_size</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ae65a76add6d756fc7ba8f12a5aad983c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>capacity</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a02b773a1ff337692e78da429030c1610</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a718c2031ead428aa52912741f6d094aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab44c0e3568a683bc6d53c8f5b11abb88</anchor>
      <arglist>(const_iterator pos, ElemType &amp;&amp;val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aa454d276f2935b1e2b5c2caec9bc2a0d</anchor>
      <arglist>(const_iterator pos, size_t count, ElemType &amp;&amp;val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a311fed9b54b87daab0646fbc1818170b</anchor>
      <arglist>(const_iterator pos, Iter first, Iter last) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a87500f1ea51f3b42dadc686a3e128fea</anchor>
      <arglist>(const_iterator pos, std::initializer_list&lt; ElemType &gt; ilist) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>emplace</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5b87d1345eccbb1b9406092e72fa0c38</anchor>
      <arglist>(const_iterator pos, Args &amp;&amp;... args) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a22389a9ed9444fe52be10c4acbdec908</anchor>
      <arglist>(const_iterator pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a723388860d72c9a162137d0293366fb2</anchor>
      <arglist>(const_iterator first, const_iterator last) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a8694e01e9b0b1c5b9152518137d5b971</anchor>
      <arglist>(size_t new_size, ElemType &amp;&amp;default_init_val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>truncate</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a6e3ac9962c706a88c1001ff83a4084f3</anchor>
      <arglist>(size_t new_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a2b3315295340dc76b69ce916d31fec35</anchor>
      <arglist>(ElemType &amp;&amp;val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>emplace_back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>af82fb4fec1f33c323123fab0ec4a74ac</anchor>
      <arglist>(Args &amp;&amp;... args) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>af99d72e29cef84f736d91d627b47a1dc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a10664e00054ea4021fec5144b69b8792</anchor>
      <arglist>(size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a44db509dce6b7b77e563c822a5936abe</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; ElemType &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5c2f4624498cba9e1e467b0eb2e9046e</anchor>
      <arglist>(size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; ElemType &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ae47ca1cc4c61e94fed30aea72ca8d268</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>array &amp;</type>
      <name>flatten</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>aa2a21958705629bde15aafae9598a2ec</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>array &amp;&amp;</type>
      <name>flatten</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ad307bea17e7640c57715d67ab8a777d4</anchor>
      <arglist>() &amp;&amp;</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aeff35977a4b13fe0fefb9a3b5917f98e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5ecdb684288275ce1786281fbe1845cc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a3ea1296a95c43125119a6fe26af5b014</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a1db6db67940c59bf0d6f7be184be3511</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a47ca3bd6392029a065f13c029b2db0b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a6e6060cb1233b87d7b57a2a203891d2a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a4a7663a4b15650cf833d5c833e313d9b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9115204bee51ac6ef962dd9d47bf1b7e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a03e1bbe1a0640953b7105fe40c733118</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa696716239e7434145103173e880fb80</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ab8f42ecf095260b1d97363949a98267b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac507d02b3b744e0624c504614e91c9e5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a480ae95e180992d152ad80e3b52a330a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a40031abf671512f9fdcd31666ce481fd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a35ec7bd4efab69906d7874df736cdaaf</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aeb23a8054899c4b0d57e10c4a3dcadf0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a68cc63dfd8e435b00c7c99da298d6733</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa818a12fc0212e5e416b38fcf103f899</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a21d7481eabdf0eaedb91ddeefa950cc1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac1417bb4313b2624e3ea270a487f153b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a48098db842e6a202902e6c85326f71b4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a423ddccc36345545615e20290c9a8a65</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::unwrap_node&lt; T &gt; &amp;</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a0f2b674e80b882b329513e7ec9aed842</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::unwrap_node&lt; T &gt; &amp;&amp;</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a292bce25bfe779dc51403e88f0cc4bcc</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::unwrap_node&lt; T &gt; &amp;</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a378e94ebc00235eb4d1da68f81edd77f</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa378fa343dab7d7bdb4073570dba5fdc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad47390f3832260db7bf06cd282598240</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a371a03c4b91cfbb8d9ee785c1eacf836</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad4a42e50f923b0fe1efff0a6719dab90</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a04d800d6ec9342d2ee2a364f05317573</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; const node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac7d6979c7246d7faee8ca48aadfcee68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a06cf25e3f80c98d88e041ef9823976c0</anchor>
      <arglist>(const array &amp;lhs, const array &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>af06c7437a0946a9d5e093d903b59f6a4</anchor>
      <arglist>(const array &amp;lhs, const array &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>ab87e435c5a41140e60cd2e703df96fbd</anchor>
      <arglist>(const array &amp;lhs, const std::initializer_list&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1array.html</anchorfile>
      <anchor>a5b3c615e4ba8fd780b966f175070b554</anchor>
      <arglist>(const array &amp;lhs, const std::vector&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>toml::date</name>
    <filename>structtoml_1_1date.html</filename>
    <member kind="variable">
      <type>uint16_t</type>
      <name>year</name>
      <anchorfile>structtoml_1_1date.html</anchorfile>
      <anchor>ad1dc522b115c69dc908540b1c6ff792b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>month</name>
      <anchorfile>structtoml_1_1date.html</anchorfile>
      <anchor>a0528c722d0a81741a95f6e3a1116614e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>day</name>
      <anchorfile>structtoml_1_1date.html</anchorfile>
      <anchor>a8ec7a7238b8edd3341b450a7b43ec011</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structtoml_1_1date.html</anchorfile>
      <anchor>a07ff3f69b41d69e780aac60d11e8a2a8</anchor>
      <arglist>(date lhs, date rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structtoml_1_1date.html</anchorfile>
      <anchor>af2ad5cc7af0b184e6fab182f32df8a1c</anchor>
      <arglist>(date lhs, date rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structtoml_1_1date.html</anchorfile>
      <anchor>af143f183b354544eb5f63a1887e65daa</anchor>
      <arglist>(date lhs, date rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structtoml_1_1date.html</anchorfile>
      <anchor>af353d0dbb3eda43ee136ac12b4b94fdd</anchor>
      <arglist>(date lhs, date rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>structtoml_1_1date.html</anchorfile>
      <anchor>a399f4b20d6b9f84a9c093026de0965c2</anchor>
      <arglist>(date lhs, date rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structtoml_1_1date.html</anchorfile>
      <anchor>aac65e3db8d117aad6dc469d4e5ec77bb</anchor>
      <arglist>(date lhs, date rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>toml::date_time</name>
    <filename>structtoml_1_1date__time.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>date_time</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a58660e699081a0e3b44ea9564dcbec64</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>date_time</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>ae96326775192b72b5a20016b800d6d0c</anchor>
      <arglist>(toml::date d, toml::time t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>date_time</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>afb5f47a37cd051f4f4647dc071ed1e0f</anchor>
      <arglist>(toml::date d, toml::time t, toml::time_offset off) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_local</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>af0d6119984645eb015f2fad0ef487bbc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>toml::date</type>
      <name>date</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a89f398585f373d1e7bd59fe440212074</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>toml::time</type>
      <name>time</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a18d5e772db4f61635643cda390c2b720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>optional&lt; toml::time_offset &gt;</type>
      <name>offset</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>af8596013f522b94a88d2caf69e90a1f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a885cbe902aeadacb0953230ade9d8b9a</anchor>
      <arglist>(const date_time &amp;lhs, const date_time &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a9ae0e032ffe90928c47b40bd8155dea3</anchor>
      <arglist>(const date_time &amp;lhs, const date_time &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a4f67803fdc02fb5549ba213a9273a63b</anchor>
      <arglist>(const date_time &amp;lhs, const date_time &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a7b2f0261ae38ef6dbb6de0fb35fbbf3b</anchor>
      <arglist>(const date_time &amp;lhs, const date_time &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a1bceb05028f33a829d61ffc768eab78a</anchor>
      <arglist>(const date_time &amp;lhs, const date_time &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structtoml_1_1date__time.html</anchorfile>
      <anchor>a361fb1904f477e0a1f7acaa3cdd14abf</anchor>
      <arglist>(const date_time &amp;lhs, const date_time &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::default_formatter</name>
    <filename>classtoml_1_1default__formatter.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>default_formatter</name>
      <anchorfile>classtoml_1_1default__formatter.html</anchorfile>
      <anchor>af2e597925932cf03b0df8f7379621582</anchor>
      <arglist>(const toml::node &amp;source, format_flags flags=default_flags) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>default_formatter</name>
      <anchorfile>classtoml_1_1default__formatter.html</anchorfile>
      <anchor>a4ddc92e5b0c25edfffe95be72bb043a2</anchor>
      <arglist>(const toml::parse_result &amp;result, format_flags flags=default_flags) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr format_flags</type>
      <name>default_flags</name>
      <anchorfile>classtoml_1_1default__formatter.html</anchorfile>
      <anchor>a5672645717f5a096d64af5d25690f8e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; T &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1default__formatter.html</anchorfile>
      <anchor>a516a015d387a195a4abb0f6262f88698</anchor>
      <arglist>(std::basic_ostream&lt; T &gt; &amp;, default_formatter&lt; U &gt; &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; T &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1default__formatter.html</anchorfile>
      <anchor>a09799f1ec6ad5804b5001fb37053e377</anchor>
      <arglist>(std::basic_ostream&lt; T &gt; &amp;, default_formatter&lt; U &gt; &amp;&amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>toml::inserter</name>
    <filename>structtoml_1_1inserter.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>toml::json_formatter</name>
    <filename>classtoml_1_1json__formatter.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>json_formatter</name>
      <anchorfile>classtoml_1_1json__formatter.html</anchorfile>
      <anchor>ace8cd7a487b042df7b78767022d54bc5</anchor>
      <arglist>(const toml::node &amp;source, format_flags flags=default_flags) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>json_formatter</name>
      <anchorfile>classtoml_1_1json__formatter.html</anchorfile>
      <anchor>a89e23abb89d86f79e232654cf0f9e22d</anchor>
      <arglist>(const toml::parse_result &amp;result, format_flags flags=default_flags) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr format_flags</type>
      <name>default_flags</name>
      <anchorfile>classtoml_1_1json__formatter.html</anchorfile>
      <anchor>ab4a448a50aa58f3111ce6e829d428b55</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; T &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1json__formatter.html</anchorfile>
      <anchor>ababd7a7f97d0673d75407a612bfc887d</anchor>
      <arglist>(std::basic_ostream&lt; T &gt; &amp;, json_formatter&lt; U &gt; &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; T &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1json__formatter.html</anchorfile>
      <anchor>a7a4c90e29dbda20e5fbcfbe5e7121f62</anchor>
      <arglist>(std::basic_ostream&lt; T &gt; &amp;, json_formatter&lt; U &gt; &amp;&amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::node</name>
    <filename>classtoml_1_1node.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a10f389035ce13abb00a1191358af6334</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a50a2501af7e42b0fab060206dde7a99e</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>accce7655b0cc340591a755412fde2ed7</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aeddf9eebbd4ece799e5675e2d9d59e4a</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aeff35977a4b13fe0fefb9a3b5917f98e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5ecdb684288275ce1786281fbe1845cc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a3ea1296a95c43125119a6fe26af5b014</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a1db6db67940c59bf0d6f7be184be3511</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a47ca3bd6392029a065f13c029b2db0b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a6e6060cb1233b87d7b57a2a203891d2a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a4a7663a4b15650cf833d5c833e313d9b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9115204bee51ac6ef962dd9d47bf1b7e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a1697f7da1cd6a5e4c3d3e25e08274b34</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a03e1bbe1a0640953b7105fe40c733118</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a68de6772e259ef122c00b0a9c7b63516</anchor>
      <arglist>(node_type ntype, node *&amp;first_nonmatch) noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a834e10ece19d04b4d774d5f224d50b8f</anchor>
      <arglist>(node_type ntype, const node *&amp;first_nonmatch) const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5d9191dc545ecded3bc8f7706c63edad</anchor>
      <arglist>(node_type ntype) const noexcept=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a7d2b7360a2ea44282890e1ded3d3946a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa696716239e7434145103173e880fb80</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>adac204f1c1e3ae99beaa79bb1624cc95</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ab8f42ecf095260b1d97363949a98267b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac507d02b3b744e0624c504614e91c9e5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a480ae95e180992d152ad80e3b52a330a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a40031abf671512f9fdcd31666ce481fd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a35ec7bd4efab69906d7874df736cdaaf</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aeb23a8054899c4b0d57e10c4a3dcadf0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a68cc63dfd8e435b00c7c99da298d6733</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa818a12fc0212e5e416b38fcf103f899</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a21d7481eabdf0eaedb91ddeefa950cc1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac1417bb4313b2624e3ea270a487f153b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a48098db842e6a202902e6c85326f71b4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a423ddccc36345545615e20290c9a8a65</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::unwrap_node&lt; T &gt; &amp;</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a0f2b674e80b882b329513e7ec9aed842</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::unwrap_node&lt; T &gt; &amp;&amp;</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a292bce25bfe779dc51403e88f0cc4bcc</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::unwrap_node&lt; T &gt; &amp;</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a378e94ebc00235eb4d1da68f81edd77f</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa378fa343dab7d7bdb4073570dba5fdc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad47390f3832260db7bf06cd282598240</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a371a03c4b91cfbb8d9ee785c1eacf836</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad4a42e50f923b0fe1efff0a6719dab90</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a04d800d6ec9342d2ee2a364f05317573</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; const node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac7d6979c7246d7faee8ca48aadfcee68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a10f389035ce13abb00a1191358af6334</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a50a2501af7e42b0fab060206dde7a99e</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>accce7655b0cc340591a755412fde2ed7</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aeddf9eebbd4ece799e5675e2d9d59e4a</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aeff35977a4b13fe0fefb9a3b5917f98e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5ecdb684288275ce1786281fbe1845cc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a3ea1296a95c43125119a6fe26af5b014</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a1db6db67940c59bf0d6f7be184be3511</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a47ca3bd6392029a065f13c029b2db0b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a6e6060cb1233b87d7b57a2a203891d2a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a4a7663a4b15650cf833d5c833e313d9b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9115204bee51ac6ef962dd9d47bf1b7e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a1697f7da1cd6a5e4c3d3e25e08274b34</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a03e1bbe1a0640953b7105fe40c733118</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a68de6772e259ef122c00b0a9c7b63516</anchor>
      <arglist>(node_type ntype, node *&amp;first_nonmatch) noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a834e10ece19d04b4d774d5f224d50b8f</anchor>
      <arglist>(node_type ntype, const node *&amp;first_nonmatch) const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5d9191dc545ecded3bc8f7706c63edad</anchor>
      <arglist>(node_type ntype) const noexcept=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a7d2b7360a2ea44282890e1ded3d3946a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa696716239e7434145103173e880fb80</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>adac204f1c1e3ae99beaa79bb1624cc95</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ab8f42ecf095260b1d97363949a98267b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac507d02b3b744e0624c504614e91c9e5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a480ae95e180992d152ad80e3b52a330a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a40031abf671512f9fdcd31666ce481fd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a35ec7bd4efab69906d7874df736cdaaf</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aeb23a8054899c4b0d57e10c4a3dcadf0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a68cc63dfd8e435b00c7c99da298d6733</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa818a12fc0212e5e416b38fcf103f899</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a21d7481eabdf0eaedb91ddeefa950cc1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac1417bb4313b2624e3ea270a487f153b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a48098db842e6a202902e6c85326f71b4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a423ddccc36345545615e20290c9a8a65</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::unwrap_node&lt; T &gt; &amp;</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a0f2b674e80b882b329513e7ec9aed842</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::unwrap_node&lt; T &gt; &amp;&amp;</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a292bce25bfe779dc51403e88f0cc4bcc</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::unwrap_node&lt; T &gt; &amp;</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a378e94ebc00235eb4d1da68f81edd77f</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa378fa343dab7d7bdb4073570dba5fdc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad47390f3832260db7bf06cd282598240</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a371a03c4b91cfbb8d9ee785c1eacf836</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad4a42e50f923b0fe1efff0a6719dab90</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a04d800d6ec9342d2ee2a364f05317573</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; const node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac7d6979c7246d7faee8ca48aadfcee68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::node_view</name>
    <filename>classtoml_1_1node__view.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>node_view</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a0d8bf511db11b67081bea35c25e4ca9e</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>node_view</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a199ca0c01e27a74b2ad6dbe554113fb8</anchor>
      <arglist>(viewed_type *node) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>node_view</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>af40ced8902e81e354af44a033f05d682</anchor>
      <arglist>(viewed_type &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ab8ee0ffcb999601a9b0247c099aa9250</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>viewed_type *</type>
      <name>node</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>afb42ba6fdddfb407bd37b697a407246d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a2483cf1a8314661919b9066ce62c9621</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a70b567ea582c472fe95a89b5b842cee6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a879d945d2880fc216085d7deb087ad38</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>aa58f8de47be5f53738b1a04d7e9d05af</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a79b47268155d955b8e2c027b0c2ae983</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ab9c835ddf017f250d84fa5d5736e8520</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a43ea3eed7b0f133fa7d752a9322c758e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a107732370c62402b1101a78e7382fd8b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>aa7ee0d1f396e1283c4a11d07b9400897</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a4dc7cf8a57db73fa799a939f7acd549d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a98a6bc33e3ba573c37a069126acf0b8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a5a380f773ae291c942a03e45a88c94b0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a6cc459be36698ec5a9ac0d00b4480eae</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a21d7c55a33aa1c868dde5cbaa7e54ec2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a2a2902064421f401e80ea687cef536da</anchor>
      <arglist>(node_type ntype, viewed_type *&amp;first_nonmatch) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>afe0abd51e0e108b306be2a3ee9561cca</anchor>
      <arglist>(node_type ntype) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a29c82d83b1d64f016eb42f95fd37e346</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a687f80c2867f3ec72cc6fa0393bcc9ae</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ad9e760e9e044bc34136ca167eba2da5c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a623c01318fd53c81ec03345343dc6356</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a808722847b84556da8c87dfb46ce3eaf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a23427a5b4bb7e07c61288ae292a3bd17</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a1e8221c23cc396edfe87b204ba07e63f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a33b269772c65f484f56be8d0371d07ad</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>aee2219cbd887ec4764e92241b0628408</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a4f614692d13ec415558290d21e0a7a87</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a9ff6488e9593bd2da5ae71c370293314</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>af7d31ebd85f054b1626af2d105ef681e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a41ed0d2afddf279ad774af738723ed3a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a7ec9dd23e116222055b4b9d17364bf26</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>aec5c764293a7eeb20009a484b34d7c3a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>aa5f84bfab779c71a07b04ca0b2db863f</anchor>
      <arglist>(Func &amp;&amp;visitor) const noexcept(visit_is_nothrow&lt; Func &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>node_view</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a2dde12894f70530d80de45a03eae78fa</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>af83a88f07c4bb71c7f89e6a4511e0ecc</anchor>
      <arglist>(std::wstring_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a5d13b026efcd31812415ead30eeb69db</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; Char &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a34a8c7bfbe5ff1c3acabdee184109076</anchor>
      <arglist>(std::basic_ostream&lt; Char &gt; &amp;, const node_view&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a754bdba78869afe6bccb4b51e0a77e45</anchor>
      <arglist>(const node_view &amp;lhs, const table &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a3b39aedbada6221a4e3857b0f0235843</anchor>
      <arglist>(const node_view &amp;lhs, const array &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ad9fd96826fcee43cd1ea1ccf6e22c895</anchor>
      <arglist>(const node_view &amp;lhs, const toml::value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a4507702b372f09069dd7f3bac281bd13</anchor>
      <arglist>(const node_view &amp;lhs, const T &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>abb9edf3ed931fff246a0f9e4ae09e350</anchor>
      <arglist>(const node_view &amp;lhs, const std::initializer_list&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a1f236c7b42d841c19b867b539fdc0fdc</anchor>
      <arglist>(const node_view &amp;lhs, const std::vector&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a754bdba78869afe6bccb4b51e0a77e45</anchor>
      <arglist>(const node_view &amp;lhs, const table &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a3b39aedbada6221a4e3857b0f0235843</anchor>
      <arglist>(const node_view &amp;lhs, const array &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ad9fd96826fcee43cd1ea1ccf6e22c895</anchor>
      <arglist>(const node_view &amp;lhs, const toml::value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a4507702b372f09069dd7f3bac281bd13</anchor>
      <arglist>(const node_view &amp;lhs, const T &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>abb9edf3ed931fff246a0f9e4ae09e350</anchor>
      <arglist>(const node_view &amp;lhs, const std::initializer_list&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a1f236c7b42d841c19b867b539fdc0fdc</anchor>
      <arglist>(const node_view &amp;lhs, const std::vector&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a2483cf1a8314661919b9066ce62c9621</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a70b567ea582c472fe95a89b5b842cee6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a879d945d2880fc216085d7deb087ad38</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>aa58f8de47be5f53738b1a04d7e9d05af</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a79b47268155d955b8e2c027b0c2ae983</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ab9c835ddf017f250d84fa5d5736e8520</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a43ea3eed7b0f133fa7d752a9322c758e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a107732370c62402b1101a78e7382fd8b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>aa7ee0d1f396e1283c4a11d07b9400897</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a4dc7cf8a57db73fa799a939f7acd549d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a98a6bc33e3ba573c37a069126acf0b8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a5a380f773ae291c942a03e45a88c94b0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a6cc459be36698ec5a9ac0d00b4480eae</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a21d7c55a33aa1c868dde5cbaa7e54ec2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a2a2902064421f401e80ea687cef536da</anchor>
      <arglist>(node_type ntype, viewed_type *&amp;first_nonmatch) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>afe0abd51e0e108b306be2a3ee9561cca</anchor>
      <arglist>(node_type ntype) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a29c82d83b1d64f016eb42f95fd37e346</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a687f80c2867f3ec72cc6fa0393bcc9ae</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>ad9e760e9e044bc34136ca167eba2da5c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a623c01318fd53c81ec03345343dc6356</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a808722847b84556da8c87dfb46ce3eaf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a23427a5b4bb7e07c61288ae292a3bd17</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a1e8221c23cc396edfe87b204ba07e63f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a33b269772c65f484f56be8d0371d07ad</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>aee2219cbd887ec4764e92241b0628408</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a4f614692d13ec415558290d21e0a7a87</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a9ff6488e9593bd2da5ae71c370293314</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>af7d31ebd85f054b1626af2d105ef681e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a41ed0d2afddf279ad774af738723ed3a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a7ec9dd23e116222055b4b9d17364bf26</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>aec5c764293a7eeb20009a484b34d7c3a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>aa5f84bfab779c71a07b04ca0b2db863f</anchor>
      <arglist>(Func &amp;&amp;visitor) const noexcept(visit_is_nothrow&lt; Func &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>node_view</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a2dde12894f70530d80de45a03eae78fa</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>af83a88f07c4bb71c7f89e6a4511e0ecc</anchor>
      <arglist>(std::wstring_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1node__view.html</anchorfile>
      <anchor>a5d13b026efcd31812415ead30eeb69db</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::parse_error</name>
    <filename>classtoml_1_1parse__error.html</filename>
    <member kind="function">
      <type>std::string_view</type>
      <name>description</name>
      <anchorfile>classtoml_1_1parse__error.html</anchorfile>
      <anchor>a5582e9d66f8aa3f6ef442c0a04d5282f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1parse__error.html</anchorfile>
      <anchor>a8168b4941305654cf4ba8fc96efd0514</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::parse_result</name>
    <filename>classtoml_1_1parse__result.html</filename>
    <member kind="typedef">
      <type>table_iterator</type>
      <name>iterator</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>aae503c11e9f9162de5cbef5e2c9f4863</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_table_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>abf92ffb48c1f4d0f129f4032708d4ab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>succeeded</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>ab5bfcd6ed385016395029bd69ad78a3c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>failed</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a9097bc552007537f840602ceca00e99b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>af66ea78a6dd881521ce865a372298e12</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>toml::table &amp;</type>
      <name>table</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a47d2ead20ae9d1681210c63319a6a162</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>toml::table &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a77b470b66dd401a0a929006dd788b882</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const toml::table &amp;</type>
      <name>table</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a993f5d59c4b10f87138f8abb8a16d51d</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>parse_error &amp;</type>
      <name>error</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>aefbb9aafdf00fa1ac979962d22e12e68</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>parse_error &amp;&amp;</type>
      <name>error</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>ab07914228f9f7436628c99df454f177d</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const parse_error &amp;</type>
      <name>error</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a9a5929b01df9a7f7f986b8431cefd2b8</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator toml::table &amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a5e14e22d4d68b27c11711a3319dc6bf9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator toml::table &amp;&amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a8dca1600886954b38b99a4a4f9cb77c4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const toml::table &amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a9d059289edaf6c7fb71916b21a2f9c9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator parse_error &amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>abc8a693cb538441b5974eff38c716669</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator parse_error &amp;&amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a9f70aa665d84aaf5f936dd27f6c95c4a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const parse_error &amp;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a43df64e02443b2abfd9d2c86c5e4c30a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>parse_result</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a058b76f39fb5a971585538f2d4098ba5</anchor>
      <arglist>(parse_result &amp;&amp;res) noexcept</arglist>
    </member>
    <member kind="function">
      <type>parse_result &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>aa4c2c770a8d214f9d508582233ff1d84</anchor>
      <arglist>(parse_result &amp;&amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~parse_result</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>ad9e22f09854af4c36860d61e0c0f25b1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>aaa83205a294dedd8857844d0b6378560</anchor>
      <arglist>(string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a3b88dad377d33e1fdda317177025fba5</anchor>
      <arglist>(string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>ade8c625d35dcc5b4fdec97d9f5a7f96f</anchor>
      <arglist>(std::wstring_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a58a3ee971220497ef922fc2ab5c7a9c0</anchor>
      <arglist>(std::wstring_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>table_iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a3f641e942f1518dffad6fcc7dc13893d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_table_iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a910f13933a0547a2920404287829781f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_table_iterator</type>
      <name>cbegin</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>af58212d8a367e5c1d38eb5d58708754b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>table_iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a336d398e329f08195d714ff02fdffca6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_table_iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a154d32bca3ea50dc5030372675a85a65</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_table_iterator</type>
      <name>cend</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>afa4f821ad60ceb06327cec6b42b05071</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; Char &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1parse__result.html</anchorfile>
      <anchor>a8b92c641ed22f79764606df797f3278e</anchor>
      <arglist>(std::basic_ostream&lt; Char &gt; &amp;os, const parse_result &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>toml::source_position</name>
    <filename>structtoml_1_1source__position.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>accba2f34a07d8b453b8f2f6baf2d73cf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>source_index</type>
      <name>line</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>ab21cac59798d70e25fe97ac7433763cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>source_index</type>
      <name>column</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>a1ca6d0db40c69d2784703011f7cf5434</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>a2661adb822c0291c5328d9d00e4b9a8f</anchor>
      <arglist>(const source_position &amp;lhs, const source_position &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>a90fec8fa1014a1358a362f9171cdb073</anchor>
      <arglist>(const source_position &amp;lhs, const source_position &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>a771714902fb113445597a1fd2a24e8cd</anchor>
      <arglist>(const source_position &amp;lhs, const source_position &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structtoml_1_1source__position.html</anchorfile>
      <anchor>abb7d47c85374301ec48e7c5f3ee1c71a</anchor>
      <arglist>(const source_position &amp;lhs, const source_position &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>toml::source_region</name>
    <filename>structtoml_1_1source__region.html</filename>
    <member kind="function">
      <type>optional&lt; std::wstring &gt;</type>
      <name>wide_path</name>
      <anchorfile>structtoml_1_1source__region.html</anchorfile>
      <anchor>ae4aaf4e5c7a8b178b4ba46e7f9d050bd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>source_position</type>
      <name>begin</name>
      <anchorfile>structtoml_1_1source__region.html</anchorfile>
      <anchor>ab36a5db15201864a13fb628f331196d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>source_position</type>
      <name>end</name>
      <anchorfile>structtoml_1_1source__region.html</anchorfile>
      <anchor>a054940b42dcf83391697ec2b8690531d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>source_path_ptr</type>
      <name>path</name>
      <anchorfile>structtoml_1_1source__region.html</anchorfile>
      <anchor>a25fc23f579edb8afc0818c013c5ac5d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::table</name>
    <filename>classtoml_1_1table.html</filename>
    <base>toml::node</base>
    <member kind="typedef">
      <type>table_iterator</type>
      <name>iterator</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aeecd89b0c0b321a9aff276ff1470f1d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_table_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a5a6ce59c3fe438ac94eadaa8a2b17957</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a823f0d3385d2d8d8320a72f78c677a35</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a94c0bf5a412f0bed2ad23914d9685b2f</anchor>
      <arglist>(const table &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ab47a76ab242afa13f1a74e5e2bcded44</anchor>
      <arglist>(table &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>table &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a54571ed4637b4164cb559135807d00c0</anchor>
      <arglist>(const table &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>table &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a5c5fd0e11db828ab264eccc96dfdd619</anchor>
      <arglist>(table &amp;&amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a5d3f92d3964aa9e47433bf7a61cbc0e7</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a58a5d740a7b210b1942915f98fe9d8fe</anchor>
      <arglist>(impl::table_init_pair(&amp;&amp;arr)[N]) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>afe589750b98c702710d643a81ed6b9af</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ad2f9333f6aeb634f4ddbec38493da7c2</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a8d24e995e5cfab4933c82ccd95dd6fa3</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>af137c1e4cf632015709d6a566cc74edc</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ad138c03bdb93f587de1d80dc98386875</anchor>
      <arglist>(node_type ntype) const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa6317598ad941866f288f0e7e0fa6e75</anchor>
      <arglist>(node_type ntype, node *&amp;first_nonmatch) noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a5ed119a41a0e771463233164f3bcc57b</anchor>
      <arglist>(node_type ntype, const node *&amp;first_nonmatch) const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aafd874c7b06b7f0f535e713b2640fe96</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_inline</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a53be1b93aa90608ed378323df835a2f3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>is_inline</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a8e797a683ff2bacd14d7e7461ecd2780</anchor>
      <arglist>(bool val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a6d8386049f630c8551597a2180479c7c</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a9b13a19ddfcd2f76685f57587d28701c</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a06fd3d9032b031b0363818939cd5cf38</anchor>
      <arglist>(std::wstring_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a404ae83ed52c7b8ce294d3d4925c8a16</anchor>
      <arglist>(std::wstring_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a334f050427eb20c8530254f4cd6dddf3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a3352f9954e03087b6f596ae23283bd3c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a15a5f8bd6d194fcbe925a24e5b73b1fb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a96da67654c5ca131cfec2e3c07aa2730</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a40c72e81de1da66b7083cad11442cb05</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a311451209f990931ea25828c6091714f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a554f495f6f2ebc993be1bd0379447051</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ad7c4105854cc817bf6e781fa7fb1b6d6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa710f85c588a1b00c3192d1553de4eef</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa757797646986f2f2cce0fa84221963e</anchor>
      <arglist>(KeyType &amp;&amp;key, ValueType &amp;&amp;val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>acefff2dfe1efb072c9062b8f60146cd9</anchor>
      <arglist>(Iter first, Iter last) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert_or_assign</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>acb97b09eb0b36ea708178678f15d0614</anchor>
      <arglist>(KeyType &amp;&amp;key, ValueType &amp;&amp;val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>emplace</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a04815da57fe75169ceb1c20946faac6b</anchor>
      <arglist>(KeyType &amp;&amp;key, ValueArgs &amp;&amp;... args) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a1a90984876ccdd03aaa9e0f9801a839f</anchor>
      <arglist>(iterator pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a4dafb4ae116d92add973e5f27f880a9d</anchor>
      <arglist>(const_iterator pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a020e8f71bec1fbff52260a5a1e0cb12e</anchor>
      <arglist>(const_iterator first, const_iterator last) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ad9d90151f332b24a0c747fa33ebb81e1</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a53151a06151fbd78887e027e95c3f788</anchor>
      <arglist>(std::wstring_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a087ecb9d9fd4562d79f83341f0c643c0</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a65a894481bab5dd2bd00690931ed2692</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aacf6efa6e7865211f7a1283f79a88ee0</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a5b6b0b84c1d2fe24b7b370f989cbd98e</anchor>
      <arglist>(std::wstring_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ab55a7ed5c436a045c69a1f1adcb07b5c</anchor>
      <arglist>(std::wstring_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a2449e053ad373e82d2500226bf084cb9</anchor>
      <arglist>(std::wstring_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ae6811ea7c692ac71880693e225c66aed</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a43afae4f760f715c69b0b8aa0a7ef071</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa67b393855cbd706ce89d5a09f062002</anchor>
      <arglist>(std::wstring_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a615c9124ee853eb6a7544c0ab3b9911f</anchor>
      <arglist>(std::wstring_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; ValueType &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a933f4a709d7bb5f51a756e571f6166f9</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; ValueType &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a180f46103dda744bf75eeadb32659b7c</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; ValueType &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ade6422b39babbf9b3e4b87cd985f0d14</anchor>
      <arglist>(std::wstring_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; ValueType &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ad734dfa38c76cf282235befd30354c90</anchor>
      <arglist>(std::wstring_view key) const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aeff35977a4b13fe0fefb9a3b5917f98e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5ecdb684288275ce1786281fbe1845cc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a3ea1296a95c43125119a6fe26af5b014</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a1db6db67940c59bf0d6f7be184be3511</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a47ca3bd6392029a065f13c029b2db0b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a6e6060cb1233b87d7b57a2a203891d2a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a4a7663a4b15650cf833d5c833e313d9b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9115204bee51ac6ef962dd9d47bf1b7e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a1697f7da1cd6a5e4c3d3e25e08274b34</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a03e1bbe1a0640953b7105fe40c733118</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>adac204f1c1e3ae99beaa79bb1624cc95</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ab8f42ecf095260b1d97363949a98267b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac507d02b3b744e0624c504614e91c9e5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a480ae95e180992d152ad80e3b52a330a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a40031abf671512f9fdcd31666ce481fd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a35ec7bd4efab69906d7874df736cdaaf</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aeb23a8054899c4b0d57e10c4a3dcadf0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a68cc63dfd8e435b00c7c99da298d6733</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa818a12fc0212e5e416b38fcf103f899</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a21d7481eabdf0eaedb91ddeefa950cc1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac1417bb4313b2624e3ea270a487f153b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a48098db842e6a202902e6c85326f71b4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a423ddccc36345545615e20290c9a8a65</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::unwrap_node&lt; T &gt; &amp;</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a0f2b674e80b882b329513e7ec9aed842</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::unwrap_node&lt; T &gt; &amp;&amp;</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a292bce25bfe779dc51403e88f0cc4bcc</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::unwrap_node&lt; T &gt; &amp;</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a378e94ebc00235eb4d1da68f81edd77f</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa378fa343dab7d7bdb4073570dba5fdc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad47390f3832260db7bf06cd282598240</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a371a03c4b91cfbb8d9ee785c1eacf836</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad4a42e50f923b0fe1efff0a6719dab90</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a04d800d6ec9342d2ee2a364f05317573</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; const node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac7d6979c7246d7faee8ca48aadfcee68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>af8ebaed8105e5de2098992764f2d534a</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>abdeb5d9d9fc23c031c78e544c6196ea6</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; Char &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ab34ff6b624f5f39fa8002f3d6e539eca</anchor>
      <arglist>(std::basic_ostream&lt; Char &gt; &amp;, const table &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>af8ebaed8105e5de2098992764f2d534a</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>abdeb5d9d9fc23c031c78e544c6196ea6</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; Char &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ab34ff6b624f5f39fa8002f3d6e539eca</anchor>
      <arglist>(std::basic_ostream&lt; Char &gt; &amp;, const table &amp;)</arglist>
    </member>
    <member kind="function">
      <type>node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>afe589750b98c702710d643a81ed6b9af</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ad2f9333f6aeb634f4ddbec38493da7c2</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a8d24e995e5cfab4933c82ccd95dd6fa3</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>af137c1e4cf632015709d6a566cc74edc</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ad138c03bdb93f587de1d80dc98386875</anchor>
      <arglist>(node_type ntype) const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa6317598ad941866f288f0e7e0fa6e75</anchor>
      <arglist>(node_type ntype, node *&amp;first_nonmatch) noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a5ed119a41a0e771463233164f3bcc57b</anchor>
      <arglist>(node_type ntype, const node *&amp;first_nonmatch) const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aafd874c7b06b7f0f535e713b2640fe96</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_inline</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a53be1b93aa90608ed378323df835a2f3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>is_inline</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a8e797a683ff2bacd14d7e7461ecd2780</anchor>
      <arglist>(bool val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a6d8386049f630c8551597a2180479c7c</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a9b13a19ddfcd2f76685f57587d28701c</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a06fd3d9032b031b0363818939cd5cf38</anchor>
      <arglist>(std::wstring_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_view&lt; const node &gt;</type>
      <name>operator[]</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a404ae83ed52c7b8ce294d3d4925c8a16</anchor>
      <arglist>(std::wstring_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a334f050427eb20c8530254f4cd6dddf3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a3352f9954e03087b6f596ae23283bd3c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a15a5f8bd6d194fcbe925a24e5b73b1fb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a96da67654c5ca131cfec2e3c07aa2730</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a40c72e81de1da66b7083cad11442cb05</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a311451209f990931ea25828c6091714f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a554f495f6f2ebc993be1bd0379447051</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ad7c4105854cc817bf6e781fa7fb1b6d6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa710f85c588a1b00c3192d1553de4eef</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa757797646986f2f2cce0fa84221963e</anchor>
      <arglist>(KeyType &amp;&amp;key, ValueType &amp;&amp;val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>acefff2dfe1efb072c9062b8f60146cd9</anchor>
      <arglist>(Iter first, Iter last) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert_or_assign</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>acb97b09eb0b36ea708178678f15d0614</anchor>
      <arglist>(KeyType &amp;&amp;key, ValueType &amp;&amp;val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>emplace</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a04815da57fe75169ceb1c20946faac6b</anchor>
      <arglist>(KeyType &amp;&amp;key, ValueArgs &amp;&amp;... args) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a1a90984876ccdd03aaa9e0f9801a839f</anchor>
      <arglist>(iterator pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a4dafb4ae116d92add973e5f27f880a9d</anchor>
      <arglist>(const_iterator pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a020e8f71bec1fbff52260a5a1e0cb12e</anchor>
      <arglist>(const_iterator first, const_iterator last) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ad9d90151f332b24a0c747fa33ebb81e1</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>erase</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a53151a06151fbd78887e027e95c3f788</anchor>
      <arglist>(std::wstring_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a087ecb9d9fd4562d79f83341f0c643c0</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a65a894481bab5dd2bd00690931ed2692</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aacf6efa6e7865211f7a1283f79a88ee0</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a5b6b0b84c1d2fe24b7b370f989cbd98e</anchor>
      <arglist>(std::wstring_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ab55a7ed5c436a045c69a1f1adcb07b5c</anchor>
      <arglist>(std::wstring_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a2449e053ad373e82d2500226bf084cb9</anchor>
      <arglist>(std::wstring_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ae6811ea7c692ac71880693e225c66aed</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a43afae4f760f715c69b0b8aa0a7ef071</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>aa67b393855cbd706ce89d5a09f062002</anchor>
      <arglist>(std::wstring_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const node *</type>
      <name>get</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a615c9124ee853eb6a7544c0ab3b9911f</anchor>
      <arglist>(std::wstring_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; ValueType &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a933f4a709d7bb5f51a756e571f6166f9</anchor>
      <arglist>(std::string_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; ValueType &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>a180f46103dda744bf75eeadb32659b7c</anchor>
      <arglist>(std::string_view key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; ValueType &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ade6422b39babbf9b3e4b87cd985f0d14</anchor>
      <arglist>(std::wstring_view key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; ValueType &gt; *</type>
      <name>get_as</name>
      <anchorfile>classtoml_1_1table.html</anchorfile>
      <anchor>ad734dfa38c76cf282235befd30354c90</anchor>
      <arglist>(std::wstring_view key) const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aeff35977a4b13fe0fefb9a3b5917f98e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a5ecdb684288275ce1786281fbe1845cc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a3ea1296a95c43125119a6fe26af5b014</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a1db6db67940c59bf0d6f7be184be3511</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a47ca3bd6392029a065f13c029b2db0b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a6e6060cb1233b87d7b57a2a203891d2a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a4a7663a4b15650cf833d5c833e313d9b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a9115204bee51ac6ef962dd9d47bf1b7e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a1697f7da1cd6a5e4c3d3e25e08274b34</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a03e1bbe1a0640953b7105fe40c733118</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>adac204f1c1e3ae99beaa79bb1624cc95</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ab8f42ecf095260b1d97363949a98267b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac507d02b3b744e0624c504614e91c9e5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a480ae95e180992d152ad80e3b52a330a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a40031abf671512f9fdcd31666ce481fd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a35ec7bd4efab69906d7874df736cdaaf</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aeb23a8054899c4b0d57e10c4a3dcadf0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual toml::value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a68cc63dfd8e435b00c7c99da298d6733</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa818a12fc0212e5e416b38fcf103f899</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a21d7481eabdf0eaedb91ddeefa950cc1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac1417bb4313b2624e3ea270a487f153b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a48098db842e6a202902e6c85326f71b4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a423ddccc36345545615e20290c9a8a65</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::unwrap_node&lt; T &gt; &amp;</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a0f2b674e80b882b329513e7ec9aed842</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::unwrap_node&lt; T &gt; &amp;&amp;</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a292bce25bfe779dc51403e88f0cc4bcc</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::unwrap_node&lt; T &gt; &amp;</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a378e94ebc00235eb4d1da68f81edd77f</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa378fa343dab7d7bdb4073570dba5fdc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad47390f3832260db7bf06cd282598240</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a371a03c4b91cfbb8d9ee785c1eacf836</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad4a42e50f923b0fe1efff0a6719dab90</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a04d800d6ec9342d2ee2a364f05317573</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; const node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac7d6979c7246d7faee8ca48aadfcee68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>toml::time</name>
    <filename>structtoml_1_1time.html</filename>
    <member kind="variable">
      <type>uint8_t</type>
      <name>hour</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>a18f32a58846d333f9e866b725b7b7ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>minute</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>a02de4fe041dfa9535eb4df60d86f7fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>second</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>a8ae0ab849a761543207ca86a2e1d0fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>nanosecond</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>a3e9c60650ccd21f1e47132b777547185</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>aa88d156f8ea405513e00702b3c88de2f</anchor>
      <arglist>(const time &amp;lhs, const time &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>a76766a077e105960758caa4a9cbfd25b</anchor>
      <arglist>(const time &amp;lhs, const time &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>a6e53cc30a5701a18713e853d8abd4b20</anchor>
      <arglist>(time lhs, time rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>a108b128e5d6a831b110909e4f18c1cbb</anchor>
      <arglist>(time lhs, time rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>aaba3d9a66b122ab5a10a359d95d0171c</anchor>
      <arglist>(time lhs, time rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structtoml_1_1time.html</anchorfile>
      <anchor>a59c7d66cd934fe5af4f85e2fdd1a3892</anchor>
      <arglist>(time lhs, time rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>toml::time_offset</name>
    <filename>structtoml_1_1time__offset.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>time_offset</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>a93151fbb3eca9339753b901aa3142c47</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>time_offset</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>a8a875e9fa59060eec5d5d775e407d46d</anchor>
      <arglist>(int8_t h, int8_t m) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>int16_t</type>
      <name>minutes</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>a2f4cd0259300e318defc0c5efde592dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>ad9423ee067d0a4c0ba39deb2679a07f6</anchor>
      <arglist>(time_offset lhs, time_offset rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>a77e5bb056ffcd6a91b1740333f23b806</anchor>
      <arglist>(time_offset lhs, time_offset rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>afe1582662b6922546524d14c1588cf9d</anchor>
      <arglist>(time_offset lhs, time_offset rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>a4a0886d9ad65963a4e812576ba0c6928</anchor>
      <arglist>(time_offset lhs, time_offset rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>aa5270a5c11af2a9344d2c20911643429</anchor>
      <arglist>(time_offset lhs, time_offset rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structtoml_1_1time__offset.html</anchorfile>
      <anchor>a0146123daf63c677b2559aaf9bda1338</anchor>
      <arglist>(time_offset lhs, time_offset rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>toml::value</name>
    <filename>classtoml_1_1value.html</filename>
    <templarg></templarg>
    <base>toml::node</base>
    <member kind="typedef">
      <type>ValueType</type>
      <name>value_type</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad87b8c7ec465c424b861aba2d4cd5526</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; std::is_same_v&lt; value_type, std::string &gt;, std::string_view, std::conditional_t&lt; impl::is_one_of&lt; value_type, double, int64_t, bool &gt;, value_type, const value_type &amp; &gt; &gt;</type>
      <name>value_arg</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad31666efce027c28c5383357badfa555</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>value</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a919970cca7c6545878a9ff5b79f7567d</anchor>
      <arglist>(Args &amp;&amp;... args) noexcept(noexcept(value_type(impl::native_value_maker&lt; value_type, std::decay_t&lt; Args &gt;... &gt;::make(std::forward&lt; Args &gt;(args)...))))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>value</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a62ace5d37c6cf09fdc589efa5e0a0905</anchor>
      <arglist>(const value &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>value</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>adfb0250a9769fea9d585609db77bc64a</anchor>
      <arglist>(value &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>value &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a339731a8213b5e0993b5547067fde1f7</anchor>
      <arglist>(const value &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>value &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a958da7aae3ff90094e348ebceaa4aa5d</anchor>
      <arglist>(value &amp;&amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>value &amp;</type>
      <name>operator=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a08950deffd1a5568154d58d27517c973</anchor>
      <arglist>(value_arg rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a6fae24eb3eca5e298e4211d2f3503fa4</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a043bd619a674718f1404f554eaef41e3</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a64d6b4223bcf8c124802bb8f97e0e40e</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a9679039a2bda46d148a8b3ff842d8702</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>aaec50db69c9e38159d6844394fe94dd5</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a48ff507b26ed64224f1866502b8eaf28</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>adf9e031d41969de6d8b55f59da72cfa3</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a4a81fff689d825a1717b1b439d130800</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>aa6218b2cf228431ab8933251cdd2827e</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a8efb92838ded8eee056a295b12f861b2</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>afa64172102844454bffe7ad2e757aace</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a0de55ce6d6abe26d1a94d4e2021bd331</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a69ff59b2ee4d65a911382220856584b5</anchor>
      <arglist>(node_type ntype) const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a1f509d1a85224c6997b481d26ecdbf5c</anchor>
      <arglist>(node_type ntype, toml::node *&amp;first_nonmatch) noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad83111695c9a3fc792940e5e09d5954e</anchor>
      <arglist>(node_type ntype, const toml::node *&amp;first_nonmatch) const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad1a3c4dd6ffe9bbc53e1e0210a1dfcb9</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>af4ff7751b5220c599d5dcee7fc44a595</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a1a50e6ae4b77e2399e979e0e32e2c122</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a388205107db2b06f7f2954942cca8063</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad66d88e92f607a426a28ca3d933f641d</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad0f53f0e903d09aecdbd62b956113457</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a693ae6fa8490000bad7c4b947a71f352</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>get</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>af607a8347e5918b35fcfb11e8f7d4398</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;&amp;</type>
      <name>get</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a0b4ea781b83a3c164df24129d0e73341</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>get</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a3a0ec9ea9604d68ba9a9a4692868f8d8</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>operator*</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a054c1fb796a4e560d4afb27019bb1aef</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;&amp;</type>
      <name>operator*</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a64ad94a1086eedde1a94f12f020498d2</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>operator*</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a15e56286d17f11a4d567eaddb36368f8</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator value_type &amp;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>adaf04b51fea2bdc3da39fbf63c240b3b</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator value_type &amp;&amp;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad5d4a1c818d7004bc4c42219edf84dd9</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const value_type &amp;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>aeaa7f385c753bc7f11f0758d8ae325b6</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_flags</type>
      <name>flags</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a1a213908a7297491a07e647967897fcb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>value &amp;</type>
      <name>flags</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a4311828058d75bfaa2c01c3395d09385</anchor>
      <arglist>(value_flags new_flags) noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a1697f7da1cd6a5e4c3d3e25e08274b34</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a03e1bbe1a0640953b7105fe40c733118</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa696716239e7434145103173e880fb80</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>adac204f1c1e3ae99beaa79bb1624cc95</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa818a12fc0212e5e416b38fcf103f899</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a21d7481eabdf0eaedb91ddeefa950cc1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac1417bb4313b2624e3ea270a487f153b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a48098db842e6a202902e6c85326f71b4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a423ddccc36345545615e20290c9a8a65</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::unwrap_node&lt; T &gt; &amp;</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a0f2b674e80b882b329513e7ec9aed842</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::unwrap_node&lt; T &gt; &amp;&amp;</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a292bce25bfe779dc51403e88f0cc4bcc</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::unwrap_node&lt; T &gt; &amp;</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a378e94ebc00235eb4d1da68f81edd77f</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa378fa343dab7d7bdb4073570dba5fdc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad47390f3832260db7bf06cd282598240</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a371a03c4b91cfbb8d9ee785c1eacf836</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad4a42e50f923b0fe1efff0a6719dab90</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a04d800d6ec9342d2ee2a364f05317573</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; const node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac7d6979c7246d7faee8ca48aadfcee68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; Char &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a3559f8309f337e65ee1baba5f2130f48</anchor>
      <arglist>(std::basic_ostream&lt; Char &gt; &amp;lhs, const value&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a0b90e4f85ecaf2c81e4ba8b42aa5ce34</anchor>
      <arglist>(const value &amp;lhs, value_arg rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a1771aa33bd2d425b542d0b9d0e90866d</anchor>
      <arglist>(const value &amp;lhs, value_arg rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a6bbe09942bd6046fa94addb911940491</anchor>
      <arglist>(value_arg lhs, const value &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a7d02565c608c663afc8f3d2102639740</anchor>
      <arglist>(const value &amp;lhs, value_arg rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a2f37f69d3e477c0c2e2ba16f6919815e</anchor>
      <arglist>(value_arg lhs, const value &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ace8c00e345c69ee93e5d2bd2df694340</anchor>
      <arglist>(const value &amp;lhs, value_arg rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>af200f2be4273ed0923743f4b918f86e6</anchor>
      <arglist>(value_arg lhs, const value &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a80417b5055072f20d3a6985d1b78af21</anchor>
      <arglist>(const value &amp;lhs, value_arg rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a727e2acd21edf04a144918d174706ba6</anchor>
      <arglist>(value_arg lhs, const value &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a2fa446100047d052d0cca2c1f3f60085</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a872e565adfbcd201f2ab1e3103699758</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a7fdc4f87f9ec3efb896cc3e09694328b</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ac6af15f59d537d95d1afe887b12b697e</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ab95d07a7f48e44baefbacbf5f6072837</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a0ebdea821d98546de4b686f450506637</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a0b90e4f85ecaf2c81e4ba8b42aa5ce34</anchor>
      <arglist>(const value &amp;lhs, value_arg rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a1771aa33bd2d425b542d0b9d0e90866d</anchor>
      <arglist>(const value &amp;lhs, value_arg rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a6bbe09942bd6046fa94addb911940491</anchor>
      <arglist>(value_arg lhs, const value &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a7d02565c608c663afc8f3d2102639740</anchor>
      <arglist>(const value &amp;lhs, value_arg rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a2f37f69d3e477c0c2e2ba16f6919815e</anchor>
      <arglist>(value_arg lhs, const value &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ace8c00e345c69ee93e5d2bd2df694340</anchor>
      <arglist>(const value &amp;lhs, value_arg rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>af200f2be4273ed0923743f4b918f86e6</anchor>
      <arglist>(value_arg lhs, const value &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a80417b5055072f20d3a6985d1b78af21</anchor>
      <arglist>(const value &amp;lhs, value_arg rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a727e2acd21edf04a144918d174706ba6</anchor>
      <arglist>(value_arg lhs, const value &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a2fa446100047d052d0cca2c1f3f60085</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a872e565adfbcd201f2ab1e3103699758</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a7fdc4f87f9ec3efb896cc3e09694328b</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ac6af15f59d537d95d1afe887b12b697e</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ab95d07a7f48e44baefbacbf5f6072837</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a0ebdea821d98546de4b686f450506637</anchor>
      <arglist>(const value &amp;lhs, const value&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>node_type</type>
      <name>type</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a6fae24eb3eca5e298e4211d2f3503fa4</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_table</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a043bd619a674718f1404f554eaef41e3</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a64d6b4223bcf8c124802bb8f97e0e40e</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_value</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a9679039a2bda46d148a8b3ff842d8702</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_string</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>aaec50db69c9e38159d6844394fe94dd5</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_integer</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a48ff507b26ed64224f1866502b8eaf28</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_floating_point</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>adf9e031d41969de6d8b55f59da72cfa3</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_number</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a4a81fff689d825a1717b1b439d130800</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>aa6218b2cf228431ab8933251cdd2827e</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a8efb92838ded8eee056a295b12f861b2</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>afa64172102844454bffe7ad2e757aace</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_date_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a0de55ce6d6abe26d1a94d4e2021bd331</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a69ff59b2ee4d65a911382220856584b5</anchor>
      <arglist>(node_type ntype) const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a1f509d1a85224c6997b481d26ecdbf5c</anchor>
      <arglist>(node_type ntype, toml::node *&amp;first_nonmatch) noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_homogeneous</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad83111695c9a3fc792940e5e09d5954e</anchor>
      <arglist>(node_type ntype, const toml::node *&amp;first_nonmatch) const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>value&lt; std::string &gt; *</type>
      <name>as_string</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad1a3c4dd6ffe9bbc53e1e0210a1dfcb9</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>value&lt; int64_t &gt; *</type>
      <name>as_integer</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>af4ff7751b5220c599d5dcee7fc44a595</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>value&lt; double &gt; *</type>
      <name>as_floating_point</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a1a50e6ae4b77e2399e979e0e32e2c122</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>value&lt; bool &gt; *</type>
      <name>as_boolean</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a388205107db2b06f7f2954942cca8063</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>value&lt; date &gt; *</type>
      <name>as_date</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad66d88e92f607a426a28ca3d933f641d</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>value&lt; time &gt; *</type>
      <name>as_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad0f53f0e903d09aecdbd62b956113457</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>value&lt; date_time &gt; *</type>
      <name>as_date_time</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a693ae6fa8490000bad7c4b947a71f352</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>get</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>af607a8347e5918b35fcfb11e8f7d4398</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;&amp;</type>
      <name>get</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a0b4ea781b83a3c164df24129d0e73341</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>get</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a3a0ec9ea9604d68ba9a9a4692868f8d8</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>operator*</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a054c1fb796a4e560d4afb27019bb1aef</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;&amp;</type>
      <name>operator*</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a64ad94a1086eedde1a94f12f020498d2</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>operator*</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a15e56286d17f11a4d567eaddb36368f8</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator value_type &amp;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>adaf04b51fea2bdc3da39fbf63c240b3b</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator value_type &amp;&amp;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>ad5d4a1c818d7004bc4c42219edf84dd9</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const value_type &amp;</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>aeaa7f385c753bc7f11f0758d8ae325b6</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_flags</type>
      <name>flags</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a1a213908a7297491a07e647967897fcb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>value &amp;</type>
      <name>flags</name>
      <anchorfile>classtoml_1_1value.html</anchorfile>
      <anchor>a4311828058d75bfaa2c01c3395d09385</anchor>
      <arglist>(value_flags new_flags) noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_array_of_tables</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a1697f7da1cd6a5e4c3d3e25e08274b34</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a03e1bbe1a0640953b7105fe40c733118</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual table *</type>
      <name>as_table</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa696716239e7434145103173e880fb80</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual array *</type>
      <name>as_array</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>adac204f1c1e3ae99beaa79bb1624cc95</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa818a12fc0212e5e416b38fcf103f899</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::wrap_node&lt; T &gt; *</type>
      <name>as</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a21d7481eabdf0eaedb91ddeefa950cc1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value_exact</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac1417bb4313b2624e3ea270a487f153b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>optional&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a48098db842e6a202902e6c85326f71b4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>value_or</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a423ddccc36345545615e20290c9a8a65</anchor>
      <arglist>(T &amp;&amp;default_value) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::unwrap_node&lt; T &gt; &amp;</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a0f2b674e80b882b329513e7ec9aed842</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>impl::unwrap_node&lt; T &gt; &amp;&amp;</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a292bce25bfe779dc51403e88f0cc4bcc</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const impl::unwrap_node&lt; T &gt; &amp;</type>
      <name>ref</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a378e94ebc00235eb4d1da68f81edd77f</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const source_region &amp;</type>
      <name>source</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>aa378fa343dab7d7bdb4073570dba5fdc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad47390f3832260db7bf06cd282598240</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a371a03c4b91cfbb8d9ee785c1eacf836</anchor>
      <arglist>(Func &amp;&amp;visitor) &amp;&amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, node &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>visit</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ad4a42e50f923b0fe1efff0a6719dab90</anchor>
      <arglist>(Func &amp;&amp;visitor) const &amp;noexcept(visit_is_nothrow&lt; Func &amp;&amp;, const node &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>a04d800d6ec9342d2ee2a364f05317573</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator node_view&lt; const node &gt;</name>
      <anchorfile>classtoml_1_1node.html</anchorfile>
      <anchor>ac7d6979c7246d7faee8ca48aadfcee68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>toml</name>
    <filename>namespacetoml.html</filename>
    <namespace>toml::literals</namespace>
    <class kind="class">toml::array</class>
    <class kind="struct">toml::inserter</class>
    <class kind="struct">toml::source_position</class>
    <class kind="struct">toml::source_region</class>
    <class kind="struct">toml::date</class>
    <class kind="struct">toml::time</class>
    <class kind="struct">toml::time_offset</class>
    <class kind="struct">toml::date_time</class>
    <class kind="class">toml::default_formatter</class>
    <class kind="class">toml::json_formatter</class>
    <class kind="class">toml::node</class>
    <class kind="class">toml::node_view</class>
    <class kind="class">toml::parse_error</class>
    <class kind="class">toml::parse_result</class>
    <class kind="class">toml::table</class>
    <class kind="class">toml::value</class>
    <member kind="typedef">
      <type>impl::array_iterator&lt; false &gt;</type>
      <name>array_iterator</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a2b0930b7b75df6f189d9815c000bef8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>impl::array_iterator&lt; true &gt;</type>
      <name>const_array_iterator</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>acc99ae392186dc605aeb233d26f07013</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::optional&lt; T &gt;</type>
      <name>optional</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>af34a9fb3305e419784104609e6bbb7ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const std::string &gt;</type>
      <name>source_path_ptr</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ac6cf446b480546ae1f71f5b86442368d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint16_t</type>
      <name>source_index</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ae845239fd7271e3d8e529302d300ad5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>impl::table_iterator&lt; false &gt;</type>
      <name>table_iterator</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a57894617837065610e5746a3204fa8e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>impl::table_iterator&lt; true &gt;</type>
      <name>const_table_iterator</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>adeb2aa84bcd2bcb46e2cdfaa5dd6572f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>node_type</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>abac3e84bbf1f2c90717fca107055f48d</anchor>
      <arglist></arglist>
      <enumvalue file="namespacetoml.html" anchor="abac3e84bbf1f2c90717fca107055f48da334c4a4c42fdb79d7ebc3e73b517e6f8">none</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="abac3e84bbf1f2c90717fca107055f48daaab9e1de16f38176f86d7a92ba337a8d">table</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="abac3e84bbf1f2c90717fca107055f48daf1f713c9e000f5d3f280adbd124df4f5">array</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="abac3e84bbf1f2c90717fca107055f48dab45cffe084dd3d20d928bee85e7b0f21">string</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="abac3e84bbf1f2c90717fca107055f48da157db7df530023575515d366c9b672e8">integer</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="abac3e84bbf1f2c90717fca107055f48da387f7c620a256fdffcec74c1e7181a2a">floating_point</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="abac3e84bbf1f2c90717fca107055f48da84e2c64f38f78ba3ea5c905ab5a2da27">boolean</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="abac3e84bbf1f2c90717fca107055f48da5fc732311905cb27e82d67f4f6511f7f">date</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="abac3e84bbf1f2c90717fca107055f48da07cc694b9b3fc636710fa08b6922c42b">time</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="abac3e84bbf1f2c90717fca107055f48dad611c46f8e65d9e049afe165de18c264">date_time</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>value_flags</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>afb4d25262a72170134337eb67e6793de</anchor>
      <arglist></arglist>
      <enumvalue file="namespacetoml.html" anchor="afb4d25262a72170134337eb67e6793dea334c4a4c42fdb79d7ebc3e73b517e6f8">none</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="afb4d25262a72170134337eb67e6793dea3d21a9285de175ffffc99cfa13df21df">format_as_binary</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="afb4d25262a72170134337eb67e6793deadfc26763754dabbdf97d3c8833a2e8ba">format_as_octal</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="afb4d25262a72170134337eb67e6793dea4dd3fec464b7da02debfbc0bd4725c29">format_as_hexadecimal</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>format_flags</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>af1a6761a2f4d80b1a541ba819d9c8e0f</anchor>
      <arglist></arglist>
      <enumvalue file="namespacetoml.html" anchor="af1a6761a2f4d80b1a541ba819d9c8e0fa334c4a4c42fdb79d7ebc3e73b517e6f8">none</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="af1a6761a2f4d80b1a541ba819d9c8e0fa6e569050aafc6eca4c0c5dfab35fd25a">quote_dates_and_times</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="af1a6761a2f4d80b1a541ba819d9c8e0fa328473763ff1ab919ce0b01d66ad3bf6">allow_literal_strings</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="af1a6761a2f4d80b1a541ba819d9c8e0fad9467c39215be4189dc8395a830f9051">allow_multi_line_strings</enumvalue>
      <enumvalue file="namespacetoml.html" anchor="af1a6761a2f4d80b1a541ba819d9c8e0fa03f40167237c22f11f9bcf825269ab40">allow_value_format_flags</enumvalue>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; Char &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>aba6195d5e83ab18f30c9a211384e2c1a</anchor>
      <arglist>(std::basic_ostream&lt; Char &gt; &amp;lhs, node_type rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; Char &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ad6baa4a70ba588d799c8b5d47368daab</anchor>
      <arglist>(std::basic_ostream&lt; Char &gt; &amp;lhs, const date &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; Char &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>adbd4fa5a540b9013568db5ca31509611</anchor>
      <arglist>(std::basic_ostream&lt; Char &gt; &amp;lhs, const time &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; Char &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ae806dceb4c37542aef0b1603ecb24f93</anchor>
      <arglist>(std::basic_ostream&lt; Char &gt; &amp;lhs, const time_offset &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; Char &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a47918bf17e54f33e998e32b837d295ae</anchor>
      <arglist>(std::basic_ostream&lt; Char &gt; &amp;lhs, const date_time &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; T &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a76e6f635590c5477371cfdbd9995e93c</anchor>
      <arglist>(std::basic_ostream&lt; T &gt; &amp;lhs, default_formatter&lt; U &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; T &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a7751ef32d579a26d6d718bd20727c366</anchor>
      <arglist>(std::basic_ostream&lt; T &gt; &amp;lhs, default_formatter&lt; U &gt; &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; T &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a71f00c85c2e052bc37e68901e528adf8</anchor>
      <arglist>(std::basic_ostream&lt; T &gt; &amp;lhs, json_formatter&lt; U &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; T &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a5950cf269cd3a637e75a0c5d862bb59e</anchor>
      <arglist>(std::basic_ostream&lt; T &gt; &amp;lhs, json_formatter&lt; U &gt; &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; Char &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>af05142410823b801c5337566ec4167e9</anchor>
      <arglist>(std::basic_ostream&lt; Char &gt; &amp;os, const node_view&lt; T &gt; &amp;nv)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; Char &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>aa96d938e7e76fa6753e2c3b319af0ab6</anchor>
      <arglist>(std::basic_ostream&lt; Char &gt; &amp;lhs, const parse_error &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>parse_result</type>
      <name>parse</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ada8654fb4ceef15c20fc1d5e0cc734dd</anchor>
      <arglist>(std::string_view doc, std::string_view source_path={})</arglist>
    </member>
    <member kind="function">
      <type>parse_result</type>
      <name>parse</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a20fa3e08d72759083fb17c772a357043</anchor>
      <arglist>(std::string_view doc, std::string &amp;&amp;source_path)</arglist>
    </member>
    <member kind="function">
      <type>parse_result</type>
      <name>parse</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a01565f26a7982d162949bac3b554a334</anchor>
      <arglist>(std::string_view doc, std::wstring_view source_path)</arglist>
    </member>
    <member kind="function">
      <type>parse_result</type>
      <name>parse</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a23fd62ae7ec77404532a589672ae1d0e</anchor>
      <arglist>(std::basic_istream&lt; Char &gt; &amp;doc, std::string_view source_path={})</arglist>
    </member>
    <member kind="function">
      <type>parse_result</type>
      <name>parse</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a64954bc71af181daba9ef3a1d12f05db</anchor>
      <arglist>(std::basic_istream&lt; Char &gt; &amp;doc, std::string &amp;&amp;source_path)</arglist>
    </member>
    <member kind="function">
      <type>parse_result</type>
      <name>parse</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a2ad07c01e86daea5544e1d92261bab81</anchor>
      <arglist>(std::basic_istream&lt; Char &gt; &amp;doc, std::wstring_view source_path)</arglist>
    </member>
    <member kind="function">
      <type>parse_result</type>
      <name>parse_file</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a8dbc58dad43c3b66f4476a7131f5741a</anchor>
      <arglist>(std::string_view file_path)</arglist>
    </member>
    <member kind="function">
      <type>parse_result</type>
      <name>parse_file</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ad425af491341206589ca6acc37c3b19e</anchor>
      <arglist>(std::wstring_view file_path)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; Char &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a97327637eb536dde43a66ea3469bce9e</anchor>
      <arglist>(std::basic_ostream&lt; Char &gt; &amp;lhs, const source_position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; Char &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a86595b9c9187cb2c09cbffebe3752f0f</anchor>
      <arglist>(std::basic_ostream&lt; Char &gt; &amp;lhs, const source_region &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_table</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ad11c8c8a8286d6931e40658679aa7ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_array</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a2251b703f3ec4d1a3036c82ead3d69cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_string</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>aea14621807afe92a840d82c7139cde07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_integer</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a513bdc4a19071f0be70e92bb6cb1a1a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_floating_point</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a1aaaa0e264cdd4f43518571f2f61ac36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_number</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a64ce7ed6974d2b17823565bc67c40873</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_boolean</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a8e79820651cc9a835082cf9abd47d885</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_date</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a3c5daa4563e3aff2b5e6460aa97d28df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_time</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a87aee32768a32bb838150421e4e3cf97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_date_time</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>a3285caf012789a607851026f9827a33d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_node_view</name>
      <anchorfile>namespacetoml.html</anchorfile>
      <anchor>ab5b06dac8c1e0de9e06411917e10b618</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>toml::literals</name>
    <filename>namespacetoml_1_1literals.html</filename>
    <member kind="function">
      <type>parse_result</type>
      <name>operator&quot;&quot;_toml</name>
      <anchorfile>namespacetoml_1_1literals.html</anchorfile>
      <anchor>a401530e560c2dc540729af01e10b2a74</anchor>
      <arglist>(const char *str, size_t len)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>configuration</name>
    <title>Library Configuration</title>
    <filename>group__configuration.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>TOML_HEADER_ONLY</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga8219bfd7e75587516385b6022b28abc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_API</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>gad443ebc67d9e196f296f2038b2ad5e46</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_ASSERT</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga8c407a8f6fe52a795db35be3f00393f8</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_CONFIG_HEADER</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga09204feb4a3ff5534623c2bd052dcec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_EXCEPTIONS</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga93097ecd88ca4bca393f60a78bda643b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_IMPLEMENTATION</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga27ee69835a1ddff9dbaf3015b4b08a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_LARGE_FILES</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga55379d57f896d97994e0aca167297c7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_OPTIONAL_TYPE</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga9c2c03f867eb6d76a5f65b06eeb1186e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_PARSER</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga53c34f99a546e479d2440b60e3e6588d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_SMALL_FLOAT_TYPE</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga11a3368da40938a6b5cfd898320706f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_SMALL_INT_TYPE</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga0722fa2c57da6360c7f2ba08c60e1a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_UNRELEASED_FEATURES</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga337ec177a5d46e3b6d8fa4f23edf98e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOML_WINDOWS_COMPAT</name>
      <anchorfile>group__configuration.html</anchorfile>
      <anchor>ga0785b375499ea976c627d775f8fc747b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>toml++</title>
    <filename>index.html</filename>
    <docanchor file="index.html" title="Features">mainpage-features</docanchor>
    <docanchor file="index.html" title="API documentation">mainpage-api-documentation</docanchor>
    <docanchor file="index.html" title="Basic examples">mainpage-example</docanchor>
    <docanchor file="index.html" title="Parsing files">mainpage-example-parsing-files</docanchor>
    <docanchor file="index.html" title="Parsing strings and iostreams">mainpage-example-parsing-strings</docanchor>
    <docanchor file="index.html" title="Handling errors without exceptions">mainpage-example-parsing-without-exceptions</docanchor>
    <docanchor file="index.html" title="Custom error formatting">mainpage-example-custom-error-formatting</docanchor>
    <docanchor file="index.html" title="Working with TOML data">mainpage-example-manipulations</docanchor>
    <docanchor file="index.html" title="Serializing as TOML and JSON">mainpage-example-serialization</docanchor>
    <docanchor file="index.html" title="Speeding up compilation">mainpage-example-speed-up-compilation</docanchor>
    <docanchor file="index.html" title="Adding toml++ to your project">mainpage-adding-lib</docanchor>
    <docanchor file="index.html" title="&quot;The old fashioned way&quot;">mainpage-adding-lib-old-school</docanchor>
    <docanchor file="index.html" title="Conan">mainpage-adding-lib-conan</docanchor>
    <docanchor file="index.html" title="DDS">mainpage-adding-lib-dds</docanchor>
    <docanchor file="index.html" title="Meson">mainpage-adding-lib-meson</docanchor>
    <docanchor file="index.html" title="Vcpkg">mainpage-adding-lib-vcpkg</docanchor>
    <docanchor file="index.html" title="CMake FetchContent">mainpage-adding-lib-cmake-fetch-content</docanchor>
    <docanchor file="index.html" title="Other environments and package managers">mainpage-adding-lib-other</docanchor>
    <docanchor file="index.html" title="Special mention: Python">mainpage-adding-lib-python</docanchor>
    <docanchor file="index.html" title="Library configuration options">mainpage-configuration</docanchor>
    <docanchor file="index.html" title="Contributing">mainpage-contributing</docanchor>
    <docanchor file="index.html" title="License">mainpage-license</docanchor>
    <docanchor file="index.html" title="Contacting the author">mainpage-contact</docanchor>
  </compound>
</tagfile>
